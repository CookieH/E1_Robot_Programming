package exercise2;

import lejos.nxt.Motor;
import lejos.nxt.SensorPort;
import lejos.nxt.SensorPortListener;
import lejos.nxt.Sound;
import lejos.robotics.navigation.DifferentialPilot;
import lejos.util.Delay;

/**
 * Listener class that listens for changes in the values generated by a sensor
 * over a port. Contains a boolean flag that is accessible via a get method
 * which returns whether or not the Listener has said that changes need to be
 * done, remains true until the changes are carried out.
 * 
 * @author E1
 * 
 */
public class LightSensorListener implements SensorPortListener {

	private boolean side;
	public static final boolean LEFT = false;
	public static final boolean RIGHT = true;
	public final LineDancing demo;
	private boolean adjusting;
	public static final int THRESHOLD = 580;

	/**
	 * @param boolean side Boolean value that represents what side light sensor
	 *        the listener is being put onto. TRUE is RIGHT. FALSE is LEFT
	 *        though use of the class constants is 0
	 * 
	 * @param LineDancing
	 *            demo takes in the instance of the LineDancing class that
	 *            contains the sensors that are being listened to
	 * 
	 */
	public LightSensorListener(boolean side, LineDancing demo) {
		this.side = side;
		this.demo = demo;
	}

	@Override
	/**
	 * Method called whenever a changed is detected in the values over the sensor port. If the new value is greater than the threshold
	 * then the adjust method of the LineDancing field that was given in the parameter is called. A boolean flag is set to to true for 
	 * the duration of this adjustment so that the forward motion will stop executing.
	 * 
	 * 
	 * @param SensorPort aSource The sensor port that is being listenend to
	 * @param int aOldValue The old value of the reading 
	 * @param int aOldValue The new value of the reading
	 */
	public void stateChanged(SensorPort aSource, int aOldValue, int aNewValue) {

		if (!side) {
			aNewValue = aNewValue + 40;
		}
		
		if (aNewValue > THRESHOLD) {
			adjusting = true;
			demo.adjustPosition(side);
			adjusting = false;
		}

	}

	/**
	 * Get method that returns whether the adjust position method of the
	 * LineDancing field has been called and is therefore currently adjusting
	 * the position of the robot.
	 * 
	 * @return Whether or not the robot is currently adjusting its position.
	 */
	public boolean adjusting() {
		return adjusting;
	}

}
